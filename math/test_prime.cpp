#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <chrono>
#include <bitset>
#include <random>
#include <map>

using namespace std;

#include "prime.cpp"

const ll ITERATIONS = 100000000;

const ll MODARITH_TESTS[][5] = {
	{31951223418117151LL, 9410185615587205LL, 51745344251572351LL, 42076187882120097LL, 20603284124581613LL},
	{906611955335922607LL, 59543305266215100LL, 1658402136649538430LL, 1436964966219351330LL, 389100497065539691LL},
	{109663607279417997LL, 1082596393072731542LL, 3639158388832318099LL, 2491418949913783740LL, 910262323778479626LL},
	{171917654824581409LL, 1418415307591351086LL, 2509738729791282579LL, 2226410289129937821LL, 1787486690822855284LL},
	{470771983208489533LL, 1572191870829096486LL, 2996373277910063546LL, 2928946435854562044LL, 2030323087334827825LL},
	{11342977201207015LL, 2531022314737816LL, 41058263852048788LL, 12521513959356704LL, 3889269618237309LL},
	{2324913913623853546LL, 59618466657097873LL, 2768114487229165379LL, 2365823099889047767LL, 2549739028586490838LL},
	{966404522654168346LL, 1094348186607291805LL, 3161694652720979397LL, 1189540004239107534LL, 1033825861458295038LL},
	{684804650038880929LL, 2740440222788238807LL, 3036760500696737576LL, 1820791084370909135LL, 1540268799689879825LL},
	{1334865375369035609LL, 324096383460594256LL, 1735339516108840932LL, 1417071687064951964LL, 1363028517931716001LL},
	{417662378152938571LL, 297399794654639465LL, 3138642380825776472LL, 2941767954308900275LL, 1850539776053473371LL},
	{728165837578428326LL, 426863502707857340LL, 1916067769204673974LL, 91263912382474386LL, 921656888083423438LL},
	{855478884312506710LL, 484794789565514130LL, 3348125619240688872LL, 702560310256197876LL, 634450157668692016LL},
	{1149747046209151483LL, 71501160301340991LL, 1159739790513844764LL, 982051704618691617LL, 758603506510019983LL},
	{929188857340414548LL, 116204931754528928LL, 2989453520504016017LL, 1187364508896309546LL, 2701567568944029765LL},
	{138120348548005137LL, 250614596760990604LL, 632744676260432302LL, 610314932686735862LL, 331600839209482109LL},
	{47428484211331956LL, 112546877826717640LL, 449597483100843472LL, 87256245409289344LL, 382930520063196560LL},
	{947189123066804413LL, 1681514573328055490LL, 1862801798986818761LL, 1196794007812805627LL, 1841145731933601315LL},
	{98112636524337033LL, 206417412024499566LL, 1631383615177725612LL, 1083670613929915698LL, 1332677335043639649LL},
	{948969738921945537LL, 382338167720346413LL, 1745411919613193684LL, 262572911560432645LL, 627934282459698537LL},
	{3637490937352237475LL, 3193987178316912873LL, 3859260354770008655LL, 3715848587558693025LL, 1872593776760748120LL},
	{677616157729564728LL, 313585662586627691LL, 1507394501534648709LL, 765048296000550999LL, 156871683273659922LL},
	{713244672992846093LL, 135267187581964704LL, 1296849199689765385LL, 1085511069991316277LL, 244236502482134146LL},
	{533444170147014927LL, 655831759994346462LL, 2683835678585457364LL, 408044941775177026LL, 571007581093135989LL},
	{1622701588380743751LL, 1822210304377130177LL, 3527398269709710982LL, 2436399514221547339LL, 928319518323256269LL},
	{2344759819119133014LL, 203843047356580LL, 3832825668852222063LL, 2776419569923141647LL, 3757725380429383185LL},
	{45339487871763714LL, 235415351659958965LL, 957525958846277909LL, 347623177743904095LL, 469393263760502916LL},
	{77821580424749316LL, 204588862708211148LL, 446473794972965018LL, 190699853069098372LL, 41670649078913408LL},
	{455292556008153509LL, 1651636740235358402LL, 2008717227319909599LL, 353143050019041391LL, 184318154928762475LL},
	{701191755198264346LL, 746656499015960751LL, 1265399122884538739LL, 81733268963061387LL, 534415276608786890LL},
	{2266880147117989733LL, 1084289798277781424LL, 2790415897246143275LL, 511754010017194842LL, 316980672235852496LL},
	{747262189818869796LL, 345251891148102687LL, 846473935531907997LL, 653960609649919116LL, 289078666538015430LL},
	{36578991654520072LL, 166045131922693556LL, 975845709572375146LL, 502442231651743530LL, 564776684256283532LL},
	{652614817851019409LL, 174453225638056081LL, 1858954608912709467LL, 746526566122132625LL, 1651298447194855628LL},
	{11075402141797256LL, 325382103634089795LL, 734976800328233111LL, 469490676066411168LL, 614964364288251086LL},
	{712778432266090052LL, 273222454017702855LL, 1207793392470326882LL, 75002720718698814LL, 578975963572140212LL},
	{1239639478623553473LL, 480167520101346734LL, 2018862261599245302LL, 1345684096823356656LL, 840438483457713819LL},
	{96278610879968713LL, 20645247753967672LL, 256511669473341546LL, 202567217859494950LL, 135851304514327879LL},
	{543717942382630617LL, 1627045848438445834LL, 3013932767649765908LL, 2272639022613015674LL, 2815983593183919365LL},
	{3024170692039857941LL, 187354957436514798LL, 3308229153765942511LL, 184762599845177557LL, 2095910017421408804LL},
	{249709745038563401LL, 107368462340457356LL, 494255037315495656LL, 31220295765300436LL, 237050885192373889LL},
	{219672863165202289LL, 46276442703580267LL, 241726703670541169LL, 187938285846480325LL, 65562188374497296LL},
	{139712007978900740LL, 520036900356165982LL, 579285749231409463LL, 483392716570362568LL, 77296041517925559LL},
	{247992421904783707LL, 191954347629242169LL, 256221622322847068LL, 66446534484087639LL, 38185969297343891LL},
	{378441107875179981LL, 1597878731994323751LL, 1743517309453007560LL, 100599652837829851LL, 1191723510452370381LL},
	{61582859247071351LL, 14584615768197376LL, 196546947696702376LL, 33528513750188264LL, 31538369001859497LL},
	{477708003574344416LL, 2010376280033785840LL, 3486299899946460992LL, 435055496639968896LL, 2843872733885927808LL},
	{632487681888416760LL, 202893044997665471LL, 866291196220713532LL, 210190212446480816LL, 507625453075279968LL},
	{699233419200808524LL, 533861043355586670LL, 3219969993433192888LL, 1049947474716382632LL, 1809900381687303648LL},
	{298282081176665871LL, 680556145611774082LL, 725607923477845648LL, 222049410213407086LL, 260258928026302561LL},
	{80969378687056973LL, 75793351447664289LL, 87955125986307901LL, 27333128519941594LL, 58950762350118587LL},
	{2768001578751601617LL, 758214384526384172LL, 3053724325468239080LL, 847362947528901324LL, 3161555355108721LL},
	{1553038163763599302LL, 3285750285818458257LL, 3793431946153158480LL, 1205975445384270534LL, 1903776074887399792LL},
	{170273135170899933LL, 2392469297971242200LL, 3344315534469170244LL, 213245580996801444LL, 1610594651477284893LL},
	{1510145736559029776LL, 980460041138548530LL, 1783525656224583107LL, 745106443160097488LL, 322543286595969508LL},
	{168506645164873621LL, 64274464452207716LL, 204252682792003988LL, 15777077013473216LL, 183748533459298233LL},
	{2183710962412940704LL, 655988702187152646LL, 2757051418266757733LL, 1356155685164822636LL, 741611508118965653LL},
	{2183432138661433540LL, 3652487781532076550LL, 3924739199125289874LL, 3442698114627075444LL, 1653756752072939368LL},
	{1232584746767968244LL, 1167905362665181618LL, 3205177286737949216LL, 464767384684139880LL, 2633676313186761344LL},
	{1957138335023023895LL, 2031119481245586397LL, 3658435871950122673LL, 2742710076068815662LL, 2687016952117755513LL},
	{108326165382217870LL, 305778442236952059LL, 1939177948762355788LL, 1820694049484895110LL, 710283166842224820LL},
	{2834648282510055552LL, 624808607878939473LL, 3307863594448258763LL, 1587690342839651366LL, 1670260690859785235LL},
	{361301343035929869LL, 154247354131013311LL, 814399051252651408LL, 120659801705865395LL, 371834684842370565LL},
	{982159380415199705LL, 1048834252063092956LL, 2918120973003003148LL, 1444889442111330260LL, 1127537846753510265LL},
	{1277308769171057712LL, 1236315258431072598LL, 1764033775863558355LL, 1292049541428569081LL, 962733925105538559LL},
	{379612777027200676LL, 532572156828042781LL, 2751333570708356419LL, 784447008897433327LL, 770643401772896781LL},
	{2171622071419871097LL, 1250233240619311696LL, 3848548089856305589LL, 359500750109497406LL, 1676033839726580881LL},
	{71088250714106327LL, 181640551909737405LL, 306917890661394453LL, 97475902690305549LL, 165763948260174083LL},
	{2468769475545792310LL, 713521663739732984LL, 2715882788683667316LL, 319227862563258392LL, 2161942908094087204LL},
	{322401868071122543LL, 391436329201570756LL, 1046377314941113867LL, 9186109209666950LL, 544456319340344923LL},
	{275144635334854486LL, 296944211986865770LL, 430298858664238788LL, 61410409608437068LL, 64590680894593996LL},
	{589651413810749622LL, 1248902206229179855LL, 2208892322727763884LL, 1002001920452570466LL, 1463128776457134624LL},
	{413161275344218886LL, 175006294069444465LL, 795892668144727881LL, 765547656953350274LL, 393092906913969383LL},
	{1216918251345747194LL, 1128208973174815500LL, 1494309097801456703LL, 118634453697747005LL, 637600527793426822LL},
	{660807192064859144LL, 2611421608912083595LL, 3200003490600559902LL, 623306686443681680LL, 361542183719708114LL},
	{677346253855778896LL, 146462241190443118LL, 1062155177534446752LL, 1048591152903264640LL, 942928248174407488LL},
	{290168890039108778LL, 204848978186300978LL, 385600807450421526LL, 98098283112568786LL, 68999213851807306LL},
	{668279959159569582LL, 384101579507433151LL, 1473401050980616381LL, 1163416678617699974LL, 1468924450541757306LL},
	{2349406205790383285LL, 528266763122499948LL, 2990611218121825689LL, 2775919180587053865LL, 1744881890414498434LL},
	{1298750647037303347LL, 158948149510964942LL, 2629425550287338945LL, 1262139658524948789LL, 2145406063047740514LL},
	{771282375594270372LL, 382131267784679356LL, 802099318540767011LL, 285205495253912013LL, 737220982648747543LL},
	{2569357680771841987LL, 2159080106938265791LL, 2659581439505121117LL, 51102434740017262LL, 1473454566875495644LL},
	{294453969120082388LL, 176138743606576818LL, 3209314344316019222LL, 2275907693494728162LL, 68688631679941632LL},
	{3350770848772555248LL, 225567351321743301LL, 3380197183898850724LL, 2805743862326910464LL, 1198043451626515976LL},
	{756483546578234326LL, 849794429594652568LL, 1418684830923376844LL, 888899352681877088LL, 1344848579937046032LL},
	{76565484882599925LL, 1216815405986412913LL, 3855201038149014383LL, 2002863537108618363LL, 2608897925815291370LL},
	{372268653591326543LL, 3131539690383481029LL, 3507116989824045178LL, 1438950980723094017LL, 1285043065734643867LL},
	{425739282625062001LL, 336459555959640869LL, 507630204336226070LL, 113544104766179059LL, 197127800427288231LL},
	{156494570316525652LL, 2165339143717721844LL, 3271770355693666678LL, 939515668330551502LL, 991236226679536514LL},
	{587336609654033011LL, 596366923971978548LL, 867742907690683468LL, 381434955295480568LL, 51535745224536453LL},
	{1191142432807168266LL, 1025743289603703514LL, 2511029005143002307LL, 2186665381067478147LL, 1042265481215408343LL},
	{138953389438931771LL, 1376509548785183026LL, 2475654277675234672LL, 141851936954261350LL, 1302714429739456969LL},
	{113058140573299457LL, 603597653838174470LL, 3206708772983862640LL, 1502857954034007670LL, 588580616776063089LL},
	{277078681373950627LL, 256723844594248533LL, 669047648951114057LL, 176949628473068776LL, 53585886097743427LL},
	{151434657931637801LL, 2411627378152444112LL, 3197035827402106752LL, 1824063886934922064LL, 1135865890927151617LL},
	{155080356858291971LL, 130158645774972172LL, 1939884111385465876LL, 122255167182824296LL, 948144528952488469LL},
	{39192219670927936LL, 549227297506023977LL, 576302973082507160LL, 244688502665489992LL, 216309053322611496LL},
	{637282969527516197LL, 1128134736683697839LL, 2461003800205057147LL, 186630776848922103LL, 2176249543729699613LL},
	{714113675053635199LL, 1878755540103283561LL, 2131760310566652060LL, 73970930943161659LL, 709185420927823699LL},
	{137370866258178010LL, 1770613297377844291LL, 1923185762341899680LL, 1448385217495989710LL, 1022716253343956160LL},
};

ll __attribute__ ((noinline)) modmulcall(ll a, ll b, ll c) { return modmul(a, b, c); }
ll __attribute__ ((noinline)) modmul2call(ll a, ll b, ll c) { return modmul2(a, b, c); }

void bench_modmul(ll num1, ll num2, ll num3) {
	auto t1 = chrono::high_resolution_clock::now();
	for (ll i = 0; i < ITERATIONS; ++i) {
		__asm__ __volatile__ ("" : : "r" (modmulcall(num1, num2, num3)) : );
	}
	auto t2 = chrono::high_resolution_clock::now();
	printf("modmul: %lldus\n",
		chrono::duration_cast<chrono::microseconds>(t2 - t1).count());
	auto t3 = chrono::high_resolution_clock::now();
	// TODO: This test is actually bugged
	for (ll i = 0; i < ITERATIONS; ++i) {
		__asm__ __volatile__ ("" : : "r" (modmul2call(num1, num2, num3)) : );
	}
	auto t4 = chrono::high_resolution_clock::now();
	printf("modmul2: %lldus\n",
		chrono::duration_cast<chrono::microseconds>(t4 - t3).count());
}

void test_modarith() {
	for (auto &test : MODARITH_TESTS) {
		assert(modpow(test[0], test[1], test[2]) == test[4]);
		assert(modmul(test[0], test[1], test[2]) == test[3]);
		assert(modmul2(test[0], test[1], test[2]) == test[3]);
	}
}

const int MAXCHECK = 100000;

void test_isprime() {
	bitset<MAXCHECK> b;
	assert(!isprime(1));
	for (int prime = 2; prime < MAXCHECK; ++prime) {
		assert(isprime(prime) == !b[prime]);
		if (prime & 1) assert(issieveprime(prime) == !b[prime]);
		if (b[prime]) continue;
		for (int comp = prime * 2; comp < MAXCHECK; comp += prime) {
			b[comp] = true;
		}
	}
	assert(isprime(1e9+7));
	assert(isprime(1e9+9));
	assert(isprime(163577857));
}

void check_factor(ll n, map<ll, int> &factors) {
	for (auto &f : factors) {
		for (int i = 0; i < f.second; ++i) {
			assert(n % f.first == 0);
			n /= f.first;
		}
	}
}

void test_factor() {
	map<ll, int> factors;
	for (auto &test : MODARITH_TESTS) {
		factors.clear();
		factor(test[0], factors);
		check_factor(test[0], factors);
	}
}

void bench_factor(ll upper, ll rounds) {
	map<ll, int> factors;
	mt19937 gen;
	uniform_int_distribution<ll> dist(1, upper);
	auto t1 = chrono::high_resolution_clock::now();
	for (ll i = 0; i < rounds; ++i) {
		factors.clear();
		factor(dist(gen), factors);
	}
	auto t2 = chrono::high_resolution_clock::now();
	printf("Factored %lld uniform values from [1, %g] in %lldms\n", rounds, (double)upper,
		chrono::duration_cast<chrono::milliseconds>(t2 - t1).count());
	uniform_int_distribution<ll> primes(1, sqrt(upper));
	t1 = chrono::high_resolution_clock::now();
	for (ll i = 0; i < rounds; ++i) {
		factors.clear();
		factor(primes(gen) * primes(gen), factors);
	}
	t2 = chrono::high_resolution_clock::now();
	printf("Factored %lld PQ values from [1, %g] in %lldms\n", rounds, (double)upper,
		chrono::duration_cast<chrono::milliseconds>(t2 - t1).count());
}

int main() {
	init_sieve();
	test_modarith();
	test_isprime();
	test_factor();
	bench_modmul(95552340254460888LL, 872701323326370208LL, 2417744585500243676LL);
	bench_factor(1e12, 1e4);
	bench_factor(1e15, 1e4);
	bench_factor(1e18, 1e4);
	return 0;
}